name: CI

on:
  pull_request:
  push:
    branches:
      - master
  schedule:
    - cron: '45 4 * * 3'

env:
  RUSTFLAGS: -Dwarnings

jobs:
  test-linux:
    name: Test ${{matrix.build}}
    runs-on: ubuntu-22.04

    steps:
      - name: Install openssl x86 and 32 support for gcc
        if: ${{ matrix.build == 'linux32' }}
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install libssl-dev:i386 gcc-multilib libc6:i386 libgcc-s1:i386
          echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/i386-linux-gnu" >> $GITHUB_ENV
          echo "YARA_OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{matrix.target}}

      - name: Build test helpers
        run: |
          cd boreal-test-helpers
          cargo build --target=${{matrix.target}}

      - name: Run tests
        env:
          YARA_CRYPTO_LIB: openssl
        run: cargo test --target=${{matrix.target}}

      - name: Run tests with Openssl
        env:
          YARA_CRYPTO_LIB: openssl
        run: cargo test --features authenticode --target=${{matrix.target}}

    strategy:
      fail-fast: false
      matrix:
        build: [linux, linux32]
        include:
          - build: linux
            target: x86_64-unknown-linux-gnu
          - build: linux32
            target: i686-unknown-linux-gnu

  test-windows:
    name: Test ${{matrix.build}}
    runs-on: windows-2022

    steps:
      - uses: actions/checkout@v3

      - name: Install OpenSSL on windows
        uses: lukka/run-vcpkg@v10
        id: runvcpkg
        env:
          VCPKG_DEFAULT_TRIPLET: ${{matrix.vcpkg_triplet}}
          VCPKG_INSTALLED_DIR: '${{ runner.workspace }}/vcpkg/installed'
        with:
          appendedCacheKey: ${{matrix.vcpkg_triplet}}
          vcpkgDirectory: '${{ runner.workspace }}/vcpkg'
          vcpkgGitCommitId: '4cac260c4b7331538d31886f57739fea0bffa27e'
          runVcpkgInstall: true

      - name: Export VCPKGRS_TRIPLET and OPENSSL_DIR env var
        shell: bash
        run: |
          echo "VCPKGRS_TRIPLET=${{ matrix.vcpkg_triplet }}" >> $GITHUB_ENV
          echo "OPENSSL_DIR=${{ runner.workspace }}\\vcpkg\\installed\\${{ matrix.vcpkg_triplet }}" >> $GITHUB_ENV
          echo "YARA_OPENSSL_DIR=${{ runner.workspace }}\\vcpkg\\installed\\${{ matrix.vcpkg_triplet }}" >> $GITHUB_ENV
          echo "YARA_CRYPTO_LIB=openssl" >> $GITHUB_ENV

      - uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{matrix.target}}

      - name: Build test helpers
        run: |
          cd boreal-test-helpers
          cargo build --target=${{matrix.target}}

      - name: Run tests
        env:
          YARA_CRYPTO_LIB: openssl
        run: cargo test --target=${{matrix.target}}

      - name: Run tests with Openssl
        env:
          YARA_CRYPTO_LIB: openssl
        run: cargo test --features authenticode --target=${{matrix.target}}

    strategy:
      fail-fast: false
      matrix:
        build: [windows, windows32]
        include:
          - build: windows
            vcpkg_triplet: x64-windows-static
            target: x86_64-pc-windows-msvc
          - build: windows32
            vcpkg_triplet: x86-windows-static
            target: i686-pc-windows-msvc

  clippy:
    name: Clippy
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - run: cargo clippy --tests --all-features

  rustmt:
    name: Rustfmt
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - run: cargo fmt --all --check

  deny:
    name: Deny
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1

  coverage:
    name: Coverage
    runs-on: ubuntu-22.04
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: |
          # First, build the test helpers in the right target dir
          cd boreal-test-helpers
          cargo build --target-dir ../target/llvm-cov-target
          cd ..
          # Then, run the tests. This needs to avoid cleaning to not remove
          # the test helpers from the target dir
          cargo llvm-cov --features authenticode --workspace --no-clean \
            --ignore-filename-regex boreal-test-helpers/src/main.rs \
            --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: true

  msrv:
    name: Rust 1.65.0
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@1.65.0
      # Only check boreal (and boreal-parser).
      # boreal-cli is a useful tool, but MSRV on it is not really useful.
      - run: |
          cd boreal
          cargo check --all-features
